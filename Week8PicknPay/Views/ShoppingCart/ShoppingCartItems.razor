
@page "/shoppingcart"

@using Microsoft.AspNetCore.Components.Web
@using Week8PicknPay.Repository
@using Week8PicknPay.Models
@using Week8PicknPay.CustomEvents


@inject IShoppingCart _cart

@if (shoppingCartItems.Count() == 0)
{
    <div class="cart-card">
        <div>
            <span class="glyphicon glyphicon-shopping-cart cart"></span>
        </div>
        <div>
            <h4>Your cart is empty!</h4>
        </div>
        <p>You have not added any item to your cart.</p>
    </div>
}
else
{
    <div class="text-center">
        <h2 style="color: #b61a4c;">Your shopping cart</h2>
        <h4 style="color:#b61a4c">Here are the products in your shopping cart.</h4>
    </div>


    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th class="text-center">Change your Mind?</th>
                <th class="text-center">Product Qty</th>
                <th class="text-center">Product</th>
                <th class="text-center">Price</th>
                <th class="text-center">Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in shoppingCartItems)
            {
                <tr>
                    <td class="text-center">
                        <button @onclick="(e => SetDelete(item))">
                            Remove
                        </button>
                    </td>
                    <td class="text-center">
                        <div class="qty-div">
                            <button class="qty-button" @onclick="(e =>DecreaseQty(item.Product.ProductId))">
                                <i class="fa-solid fa-minus"></i>
                            </button>
                            @item.Quantity
                            <button class="qty-button" @onclick="(e =>IncreaseQty(item.Product.ProductId))">
                                <i class="fa-solid fa-plus"></i>
                            </button>
                        </div>
                    </td>

                    <td class="text-center">@item.Product.Name</td>
                    <td class="text-center">@string.Format("# {0:N0}", item.Product.Price)</td>
                    <td class="text-center">
                        @(string.Format("# {0:N0}", (item.Quantity * item.Product.Price)))
                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="3" class="text-right" style="font-weight:bolder">Total (excluding delivery charges):</td>
                <td colspan="2" class="text-left" style="font-weight:bolder">
                    @string.Format("# {0:N0}", _cart.GetShoppingCartTotal())
                </td>
            </tr>
        </tfoot>
    </table>

    <div class="text-center" style="margin-bottom: 3rem;">
        <a class="btn btn-primary" href="/order/checkout">Check out now!</a>
    </div>
}





@if (delete != null)
{
    <div class="alert alert-danger">
        <div>
            <p class="alert-info">Do you want to remove @delete.Product.Name from cart?</p>
        </div>
        <div style="display: flex;">
            <button class="alert-link" @onclick="(e => RemoveProductFromCart())">Yes</button>
            <button class="alert-link" @onclick="(e => CancelDelete())">No</button>
        </div>
    </div>
}


@code {

    ShoppingCartItem delete;

    List<ShoppingCartItem> shoppingCartItems;

    protected override void OnParametersSet()
    {
        shoppingCartItems = _cart.GetShoppingCartItems();
    }

    void IncreaseQty(int id)
    {
        _cart.IncreaseQty(id);
    }

    void DecreaseQty(int id)
    {
        _cart.DecreaseQty(id);
    }

    void SetDelete(ShoppingCartItem item)
    {
        delete = item;
    }

    void CancelDelete()
    {
        delete = null;
    }

    void RemoveProductFromCart()
    {
        _cart.RemoveFromCart(delete.Product.ProductId);
        shoppingCartItems.Remove(delete);
        delete = null;
        CartEvent.OnCartChange(EventArgs.Empty);
    }
}